# -*- coding: utf-8 -*-
"""chatbot_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zVufETpFJvBuGWu2ccoi-cje-HRCrowT
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile intents.json
# {
#   "intents": [
#     {
#       "tag": "greeting",
#       "patterns": [
#         "Hi",
#         "Hey",
#         "Is anyone there?",
#         "Hello",
#         "Hay"
#       ],
#       "responses": [
#         "Hello",
#         "Hi",
#         "Hi there"
#       ]
#     },
# 
#     {
#       "tag": "goodbye",
#       "patterns": [
#         "Bye",
#         "See you later",
#         "Goodbye"
#       ],
#       "responses": [
#         "See you later",
#         "Have a nice day",
#         "Bye! Come back again"
#       ]
#     },
# 
#     {
#       "tag": "thanks",
#       "patterns": [
#         "Thanks",
#         "Thank you",
#         "That's helpful",
#         "Thanks for the help"
#       ],
#       "responses": [
#         "Happy to help!",
#         "Any time!",
#         "My pleasure",
#         "You're most welcome!"
#       ]
#     },
# 
#     {
#       "tag": "about",
#       "patterns": [
#         "Who are you?",
#         "What are you?",
#         "Who you are?"
#       ],
#       "responses": [
#         "I'm Joana, your bot assistant",
#         "I'm Joana, an Artificial Intelligent bot"
#       ]
#     },
# 
#     {
#       "tag": "name",
#       "patterns": [
#         "what is your name",
#         "what should I call you",
#         "whats your name?"
#       ],
#       "responses": [
#         "You can call me Joana.",
#         "I'm Joana!",
#         "Just call me as Joana"
#       ]
#     },
# 
#     {
#       "tag": "help",
#       "patterns": [
#         "Could you help me?",
#         "give me a hand please",
#         "Can you help?",
#         "What can you do for me?",
#         "I need a support",
#         "I need a help",
#         "support me please"
#       ],
#       "responses": [
#         "Tell me how can assist you",
#         "Tell me your problem to assist you",
#         "Yes Sure, How can I support you"
#       ]
#     },
# 
#     {
#       "tag": "trackorder",
#       "patterns": [
#         "where is my order?",
#         "I haven't received my order yet",
#         "order is late"
#       ],
#       "responses": [
#         "I apologize, you haven't received th order yet, let me connect you with the restaurent",
#         "I'm so sorry, let me check with the delivery executive to get the exact location of him"
#       ]
#     },
# 
#     {
#       "tag": "payments",
#       "patterns":[
#         "Do you take credit cards?",
#         "Do you accept Mastercard?",
#         "Are you cash only?"
#       ],
#       "responses": [
#         "We accept VISA, Mastercard and AMEX",
#         "We accept most major credit cards"
#       ]
#     },
# 
#     {
#       "tag": "missing",
#       "patterns":[
#         "missing food from package",
#         "part of item is missing"
#       ],
#       "responses": [
#         "I apologize, the package has missing food, let me check with the restaurent for more details and help you with quick resolution",
#         "I apologize, would you like to have 10% of refund for the missing food?"
#       ]
#     },
# 
#     {
#       "tag": "cancel",
#       "patterns": [
#         "I want to cancel my order",
#         "help in cancelling the order",
#         "order cancellation"
#       ],
#       "responses": [
#         "help us with the reason for cancelling the order",
#         "there will be a cancelling charge as order is already preparaing, would you still like to cancel the order?"
#         
#       ]
#     },
# 
#    {
#       "tag": "modifyorder",
#       "patterns": [
#         "I want to modify my order",
#         "Want to change my order",
#         "add food in item"       
#       ],
#       "responses": [
#         "Please help us, which item you'd like to add?",
#         "What modification you'd like to have",
#         "Sure, let me connect you with the restaurent for the modification"
#       ]
#     },
# 
#    {
#       "tag": "says delivered but not received",
#       "patterns": [
#         "my order says delivered, but not received",
#         "order hasn't reached yet, even it says delivered"
#       ],
#       "responses": [
#         "apologize for the inconvenience, let me connect with the delivery executive for exact status",
#         "I apologize, let me check with the delivery executive for exact status, kindly, wait for 2 minutes"
#       ]
#     },    
# 
#     {
#       "tag": "change delivery address",
#       "patterns": [
#         "I want to change my delivery address",
#         "Can I change my delivery address?",
#          "edit my delivery address"
#       ],
#       "responses": [
#         "Go to setting > address > change",
#         "you can check the step on the website : https://fooddelivery/addresschange"
#         ]
#     },
#     
#     {
#       "tag": "invoice",
#       "patterns": [
#         "want the order invoice",
#         "can i download the order invoice?",
#         "how to get order invoice?"
#         ],
#       "responses": [
#         "download the order invoice from setting>invoice>download",
#         "go to setting>invoice>download for invoice"
#       ]
#     },
#     
#     {
#       "tag": "close account",
#       "patterns": [
#         "can I close my account?",
#         "deactivate the account",
#         "how to close my account?",
#         "steps to deactivate the account"
#       ],
#       "responses": [
#         "sure, steps to close account is : setting>account>close",
#         "find the step on our website : https://foodapp/closeaccount",
#         "yes, I can close the account, shall I proceed?"
#       ]
#     },
#     
#     {
#       "tag": "complaint",
#       "patterns": [
#         "have a complaint",
#         "I want to raise a complaint",
#         "there is a complaint about a service"
#       ],
#       "responses": [
#         "Please provide us your complaint to assist you further",
#         "Please mention your complaint, we will reach you and sorry for any inconvenience caused"
#       ]
#     }
#   ]
# }
#!pip install tensorflow

import json 
import numpy as np 
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder

with open('intents.json') as file:
    data = json.load(file)
    
training_sentences = []
training_labels = []
labels = []
responses = []


for intent in data['intents']:
    for pattern in intent['patterns']:
        training_sentences.append(pattern)
        training_labels.append(intent['tag'])
    responses.append(intent['responses'])
    
    if intent['tag'] not in labels:
        labels.append(intent['tag'])
        
num_classes = len(labels)

data

lbl_encoder = LabelEncoder()
lbl_encoder.fit(training_labels)
training_labels = lbl_encoder.transform(training_labels)

vocab_size = 1000
embedding_dim = 16
max_len = 20
oov_token = "<OOV>"

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)
tokenizer.fit_on_texts(training_sentences)
word_index = tokenizer.word_index
sequences = tokenizer.texts_to_sequences(training_sentences)
padded_sequences = pad_sequences(sequences, truncating='post', maxlen=max_len)

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim, input_length=max_len))
model.add(GlobalAveragePooling1D())
model.add(Dense(16, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', 
              optimizer='adam', metrics=['accuracy'])

model.summary()

epochs = 500
history = model.fit(padded_sequences, np.array(training_labels), epochs=epochs)

# to save the trained model
model.save("chat_model")

import pickle

# to save the fitted tokenizer
with open('tokenizer.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)
    
# to save the fitted label encoder
with open('label_encoder.pickle', 'wb') as ecn_file:
    pickle.dump(lbl_encoder, ecn_file, protocol=pickle.HIGHEST_PROTOCOL)

#!pip install colorama

import json 
import numpy as np
from tensorflow import keras
from sklearn.preprocessing import LabelEncoder

import colorama 
colorama.init()
from colorama import Fore, Style, Back

import random
import pickle

with open("intents.json") as file:
    data = json.load(file)


def chat():
    # load trained model
    model = keras.models.load_model('chat_model')

    # load tokenizer object
    with open('tokenizer.pickle', 'rb') as handle:
        tokenizer = pickle.load(handle)

    # load label encoder object
    with open('label_encoder.pickle', 'rb') as enc:
        lbl_encoder = pickle.load(enc)

    # parameters
    max_len = 20
    
    while True:
        print(Fore.LIGHTBLUE_EX + "User: " + Style.RESET_ALL, end="")
        inp = input()
        if inp.lower() == "quit":
            break

        result = model.predict(keras.preprocessing.sequence.pad_sequences(tokenizer.texts_to_sequences([inp]),
                                             truncating='post', maxlen=max_len))
        tag = lbl_encoder.inverse_transform([np.argmax(result)])

        for i in data['intents']:
            if i['tag'] == tag:
                print(Fore.GREEN + "ChatBot:" + Style.RESET_ALL , np.random.choice(i['responses']))

        # print(Fore.GREEN + "ChatBot:" + Style.RESET_ALL,random.choice(responses))

print(Fore.YELLOW + "Start messaging with the bot (type quit to stop)!" + Style.RESET_ALL)
chat()

def main():
    st.sidebar.title("NLP Bot")
    st.title(""" Initialize the bot by clicking the "Initialize bot" button.""")
    bot = st.text_input("Start messaging with the bot (type quit to stop)!")
    results=''
    if st.button("Click Here"):
        results= chat()
    st.success(results)

if __name__=='__main__':
    main()
